Metadata-Version: 2.4
Name: django-admin-log-viewer
Version: 2.0.0
Summary: A powerful Django app for viewing and monitoring log files in the admin panel with multi-line support, real-time updates, and configurable formats
Home-page: https://github.com/ammahmoudi/django-admin-log-viewer
Author: Amirhossein Mahmoudi
Author-email: Amirhossein Mahmoudi <am.mahmoudi@outlook.com>
License: MIT
Project-URL: Homepage, https://github.com/ammahmoudi/django-admin-log-viewer
Project-URL: Repository, https://github.com/ammahmoudi/django-admin-log-viewer
Project-URL: Issues, https://github.com/ammahmoudi/django-admin-log-viewer/issues
Project-URL: Documentation, https://github.com/ammahmoudi/django-admin-log-viewer#readme
Keywords: django,admin,log,viewer,monitoring,debugging,real-time,multi-line,stack-trace,celery,nginx,apache,log-rotation,log-parsing,log-analysis
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: System Administrators
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Framework :: Django
Classifier: Framework :: Django :: 3.2
Classifier: Framework :: Django :: 4.0
Classifier: Framework :: Django :: 4.1
Classifier: Framework :: Django :: 4.2
Classifier: Framework :: Django :: 5.0
Classifier: Framework :: Django :: 5.1
Classifier: Topic :: Internet :: WWW/HTTP
Classifier: Topic :: Internet :: WWW/HTTP :: Dynamic Content
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Topic :: System :: Logging
Classifier: Topic :: System :: Monitoring
Classifier: Topic :: System :: Systems Administration
Classifier: Topic :: Utilities
Classifier: Environment :: Web Environment
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: Django>=3.2
Provides-Extra: dev
Requires-Dist: pytest>=6.0; extra == "dev"
Requires-Dist: pytest-django>=4.0; extra == "dev"
Requires-Dist: black>=21.0; extra == "dev"
Requires-Dist: flake8>=3.8; extra == "dev"
Requires-Dist: isort>=5.0; extra == "dev"
Dynamic: author
Dynamic: home-page
Dynamic: license-file
Dynamic: requires-python

# Django Admin Log Viewer

A powerful Django app that provides a comprehensive web interface to view and monitor log files directly in the Django admin panel.

## üåü Features

### Core Features
- **Multi-Log File Support**: View multiple log files with automatic detection and grouping
- **Configurable Log Formats**: Support for Django, Celery, Nginx, and custom log formats
- **Multi-line Log Processing**: Properly handles stack traces and multi-line log entries
- **Smart Pagination**: Multi-line aware pagination that never splits log entries across pages
- **Real-time Monitoring**: Live mode with auto-refresh for real-time log monitoring
- **Log Rotation Support**: Automatic detection and handling of rotated log files (.1, .2, .gz, etc.)

### User Experience
- **Responsive Design**: Works perfectly on desktop, tablet, and mobile devices
- **Dark Mode Support**: Built-in dark theme for comfortable viewing
- **Advanced Filtering**: Filter by log levels (DEBUG, INFO, WARNING, ERROR, CRITICAL)
- **Download Functionality**: Download individual log files directly from the interface
- **Sidebar Navigation**: Easy navigation between multiple log files
- **Search & Filtering**: Quick search through log content

### Technical Features
- **Memory Efficient**: Streaming file reading for large log files
- **Security Focused**: Staff-only access with proper file path validation
- **Performance Optimized**: AJAX-based updates for smooth user experience
- **No Database Required**: Reads files directly from disk
- **Configurable UI**: Customizable colors, refresh intervals, and display options

## üì¶ Installation

### Production Installation

```bash
pip install django-admin-log-viewer
```

### Development Installation (Editable Mode)

For development or contributing:

```bash
# Clone the repository
git clone https://github.com/ammahmoudi/django-admin-log-viewer.git
cd django-admin-log-viewer

# Install in editable mode
pip install -e .

# Or with development dependencies
pip install -e .[dev]
```

The editable install (`-e` flag) allows you to modify the source code and see changes immediately without reinstalling.

### 2. Add to Django Settings

Add `django_admin_log_viewer` to your `INSTALLED_APPS`:

```python
INSTALLED_APPS = [
    # ... other apps
    'django.contrib.admin',  # Required
    'django.contrib.auth',   # Required  
    'django.contrib.contenttypes',  # Required
    'django_admin_log_viewer',
]
```

### 3. Basic Configuration

Add to your `settings.py`:

```python
import os
from pathlib import Path

# Basic log viewer settings
LOG_VIEWER_FILES = ['django.log', 'application.log']
LOG_VIEWER_FILES_DIR = BASE_DIR / 'logs'  # or '/path/to/your/logs/'
LOG_VIEWER_PAGE_LENGTH = 25
```

### 4. URL Configuration

The log viewer integrates automatically with Django admin - no URL configuration needed!

## ‚öôÔ∏è Configuration

### Basic Settings

```python
# Required: List of log files to monitor
LOG_VIEWER_FILES = ['django.log', 'application.log', 'celery_beat.log']

# Required: Directory containing log files
LOG_VIEWER_FILES_DIR = BASE_DIR / 'logs'

# Display settings
LOG_VIEWER_PAGE_LENGTH = 25                    # Log entries per page
LOG_VIEWER_MAX_READ_LINES = 1000              # Max lines to read per request
LOG_VIEWER_FILE_LIST_MAX_ITEMS_PER_PAGE = 25  # Files per page in file list
LOG_VIEWER_FILE_LIST_TITLE = "Django Log Viewer"

# Real-time monitoring
LOGVIEWER_REFRESH_INTERVAL = 5000             # Auto-refresh interval (ms)
LOGVIEWER_AUTO_REFRESH_DEFAULT = True         # Enable auto-refresh by default
LOGVIEWER_AUTO_SCROLL_TO_BOTTOM = True        # Auto-scroll to latest logs
LOGVIEWER_ONLY_REFRESH_WHEN_ACTIVE = True     # Only refresh when tab is active

# Performance settings  
LOGVIEWER_INITIAL_NUMBER_OF_CHARS = 2048      # Initial load size
LOGVIEWER_DISABLE_ACCESS_LOGS = True          # Don't log AJAX requests
```

### Advanced Log Format Configuration

Configure custom log formats for different types of log files:

```python
# Log format parsing configuration
LOG_VIEWER_FORMATS = {
    'django_default': {
        'pattern': r'(?P<level>\w+)\s+(?P<timestamp>\d{4}-\d{2}-\d{2}\s+\d{2}:\d{2}:\d{2},\d+)\s+(?P<module>[\w\.]+):\s*(?P<message>.*)',
        'timestamp_format': '%Y-%m-%d %H:%M:%S,%f',
        'description': 'Django default: LEVEL YYYY-MM-DD HH:MM:SS,mmm module: message'
    },
    'celery_beat': {
        'pattern': r'(?P<level>\w+)\s+(?P<timestamp>\d{4}-\d{2}-\d{2}\s+\d{2}:\d{2}:\d{2},\d+)\s+(?P<module>[\w\.]+):\s*(?P<message>.*)',
        'timestamp_format': '%Y-%m-%d %H:%M:%S,%f',
        'description': 'Celery Beat: INFO YYYY-MM-DD HH:MM:SS,mmm celery.beat: message'
    },
    'nginx_access': {
        'pattern': r'(?P<ip>\d+\.\d+\.\d+\.\d+)\s+-\s+-\s+\[(?P<timestamp>[^\]]+)\]\s+"(?P<method>\w+)\s+(?P<url>\S+)\s+HTTP/[\d\.]+"\s+(?P<status>\d+)\s+(?P<size>\d+)',
        'timestamp_format': '%d/%b/%Y:%H:%M:%S %z',
        'description': 'Nginx access logs'
    },
    'simple': {
        'pattern': r'(?P<level>\w+):\s*(?P<message>.*)',
        'timestamp_format': None,
        'description': 'Simple format: LEVEL: message'
    }
}

# Per-file format assignment
LOG_VIEWER_FILE_FORMATS = {
    'django.log': 'django_default',
    'application.log': 'simple', 
    'celery_beat.log': 'celery_beat',
    'access.log': 'nginx_access',
}

# Default format for unspecified files
LOG_VIEWER_DEFAULT_FORMAT = 'django_default'
```

### Styling and Colors

```python
# Custom log level colors
LOG_VIEWER_LEVEL_COLORS = {
    'DEBUG': '#6c757d',    # Gray
    'INFO': '#0dcaf0',     # Cyan  
    'WARNING': '#ffc107',  # Yellow
    'WARN': '#ffc107',     # Yellow (alias)
    'ERROR': '#dc3545',    # Red
    'CRITICAL': '#6f42c1', # Purple
    'FATAL': '#6f42c1',    # Purple (alias)
}
```

## üöÄ Usage

### Accessing the Log Viewer

1. Login to Django Admin as a staff user
2. Look for **"Log Files"** in the admin interface
3. Click to view the list of available log files
4. Select any log file to view its contents

### Features in Action

- **Real-time Monitoring**: Toggle "Live Mode" to auto-refresh logs
- **Multi-line Support**: Stack traces and exceptions are properly grouped
- **Download Logs**: Click the download button to save log files locally
- **Pagination**: Navigate through large log files with smart pagination
- **Filtering**: Filter by log levels using the dropdown menu
- **Search**: Use browser search (Ctrl+F) to find specific content

## üîß Advanced Usage

### Custom Log Formats

Create custom regex patterns for your specific log formats:

```python
LOG_VIEWER_FORMATS = {
    'my_custom_format': {
        'pattern': r'(?P<timestamp>\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2})\s+(?P<level>\w+)\s+(?P<message>.*)',
        'timestamp_format': '%Y-%m-%dT%H:%M:%S',
        'description': 'Custom ISO timestamp format'
    }
}
```

### Log Rotation Support

The viewer automatically detects rotated log files:
- `application.log` (current)
- `application.log.1` (yesterday)
- `application.log.2.gz` (compressed older logs)
- `application.log.2023-12-01` (dated logs)

### Multi-line Processing

Perfect handling of:
- Python stack traces
- Java exceptions  
- SQL query logs
- JSON formatted logs
- Any multi-line log entry

## üõ°Ô∏è Security

- **Staff Only Access**: Only Django staff users can access log files
- **Path Validation**: Prevents directory traversal attacks
- **File Size Limits**: Configurable limits prevent memory exhaustion
- **Error Handling**: Graceful handling of missing or corrupt files

## üìã Requirements

- **Python**: 3.8+ 
- **Django**: 3.2+
- **Permissions**: Staff access to Django admin

## ü§ù Contributing

Contributions are welcome! Please feel free to submit a Pull Request.

## üìÑ License

MIT License - see LICENSE file for details.

## üêõ Troubleshooting

### Log Files Not Showing
- Check `LOG_VIEWER_FILES_DIR` path exists
- Verify file permissions
- Ensure files are listed in `LOG_VIEWER_FILES`

### Performance Issues
- Reduce `LOG_VIEWER_PAGE_LENGTH` for large files
- Increase `LOGVIEWER_REFRESH_INTERVAL` 
- Set `LOGVIEWER_DISABLE_ACCESS_LOGS = True`

### Multi-line Logs Not Grouping
- Check your log format regex pattern
- Ensure the pattern matches the first line of log entries
- Verify timestamp format matches your logs

## üéØ Changelog

### v2.0.0 (Latest)
- ‚úÖ Multi-line log processing with smart pagination
- ‚úÖ Configurable log format parsing
- ‚úÖ Log rotation support 
- ‚úÖ Dark mode theme
- ‚úÖ Real-time monitoring with live mode
- ‚úÖ Module/logger name display
- ‚úÖ Download functionality
- ‚úÖ Responsive sidebar navigation
- ‚úÖ Memory-efficient streaming

---

‚≠ê **Star this repo if you find it useful!**
