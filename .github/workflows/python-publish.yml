name: Build and Publish to PyPI

on:
  release:
    types: [published]

permissions:
  contents: read

jobs:
  # Test the package before building
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        django-version: ["3.2", "4.0", "4.1", "4.2", "5.0", "5.1", "5.2"]
        exclude:
          # Django 5.0+ requires Python 3.10+
          - python-version: "3.8"
            django-version: "5.0"
          - python-version: "3.8"
            django-version: "5.1"
          - python-version: "3.8"
            django-version: "5.2"
          - python-version: "3.9"
            django-version: "5.0"
          - python-version: "3.9"
            django-version: "5.1"
          - python-version: "3.9"
            django-version: "5.2"

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install Django==${{ matrix.django-version }}
          pip install -e .

      - name: Run tests
        run: |
          cd myproject
          python manage.py test django_admin_log_viewer

  # Build release distributions
  release-build:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install build twine

      - name: Verify package metadata
        run: |
          python -c "import django_admin_log_viewer; print(f'Version: {django_admin_log_viewer.__version__}')"

      - name: Build release distributions
        run: |
          python -m build

      - name: Check distributions
        run: |
          python -m twine check dist/*

      - name: Upload distributions
        uses: actions/upload-artifact@v4
        with:
          name: release-dists
          path: dist/

  # Publish to PyPI
  pypi-publish:
    runs-on: ubuntu-latest
    needs:
      - release-build
    permissions:
      id-token: write

    environment:
      name: pypi
      url: https://pypi.org/project/django-admin-log-viewer/

    steps:
      - name: Retrieve release distributions
        uses: actions/download-artifact@v4
        with:
          name: release-dists
          path: dist/

      - name: Publish release distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/

  # Create GitHub release notes
  release-notes:
    runs-on: ubuntu-latest
    needs: pypi-publish
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4

      - name: Extract changelog for this version
        run: |
          VERSION=$(python -c "import configparser; c = configparser.ConfigParser(); c.read('pyproject.toml'); print(c['project']['version'].strip('\"'))")
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          
          # Extract changelog section for this version
          awk "/## \[${VERSION}\]/{flag=1; next} /## \[/{flag=0} flag" CHANGELOG.md > release_notes.md || echo "## Changes in this release" > release_notes.md

      - name: Update release notes
        uses: softprops/action-gh-release@v1
        with:
          body_path: release_notes.md
